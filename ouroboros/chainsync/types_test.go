// Copyright 2021 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package chainsync

import (
	"encoding/json"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"reflect"
	"sort"
	"testing"

	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/fxamacker/cbor/v2"
	"github.com/nsf/jsondiff"
)

func TestUnmarshal(t *testing.T) {
	err := filepath.Walk("../../ext/ogmios/server/test/vectors/ChainSync/Response/RequestNext", assertStructMatchesSchema(t))
	if err != nil {
		t.Fatalf("got %v; want nil", err)
	}
	decoder := json.NewDecoder(nil)
	decoder.DisallowUnknownFields()
}

func assertStructMatchesSchema(t *testing.T) filepath.WalkFunc {
	return func(path string, info fs.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}

		path, _ = filepath.Abs(path)
		f, err := os.Open(path)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		defer f.Close()

		decoder := json.NewDecoder(f)
		decoder.DisallowUnknownFields()
		err = decoder.Decode(&Response{})
		if err != nil {
			t.Fatalf("got %v; want nil: %v", err, fmt.Sprintf("struct did not match schema for file, %v", path))
		}

		return nil
	}
}

func TestDynamodbSerialize(t *testing.T) {
	err := filepath.Walk("../../ext/ogmios/server/test/vectors/ChainSync/Response", assertDynamoDBSerialize(t))
	if err != nil {
		t.Fatalf("got %v; want nil", err)
	}
}

func assertDynamoDBSerialize(t *testing.T) filepath.WalkFunc {
	return func(path string, info fs.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}

		path, _ = filepath.Abs(path)
		f, err := os.Open(path)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		defer f.Close()

		var want Response
		decoder := json.NewDecoder(f)
		decoder.DisallowUnknownFields()
		err = decoder.Decode(&want)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		item, err := dynamodbattribute.Marshal(want)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		var got Response
		err = dynamodbattribute.Unmarshal(item, &got)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		w, err := json.Marshal(want)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		g, err := json.Marshal(got)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		opts := jsondiff.DefaultConsoleOptions()
		diff, s := jsondiff.Compare(w, g, &opts)
		if diff == jsondiff.FullMatch {
			return nil
		}

		if got, want := diff, jsondiff.FullMatch; !reflect.DeepEqual(got, want) {
			fmt.Println(s)
			t.Fatalf("got %#v; want %#v", got, want)
		}

		return nil
	}
}

func TestPoint_CBOR(t *testing.T) {
	t.Run("string", func(t *testing.T) {
		want := PointString("origin")
		item, err := cbor.Marshal(want.Point())
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		var point Point
		err = cbor.Unmarshal(item, &point)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		if got, want := point.PointType(), PointTypeString; got != want {
			t.Fatalf("got %v; want %v", got, want)
		}

		got, ok := point.PointString()
		if !ok {
			t.Fatalf("got false; want true")
		}
		if got != want {
			t.Fatalf("got %v; want %v", got, want)
		}
	})

	t.Run("struct", func(t *testing.T) {
		want := &PointStruct{
			BlockNo: 123,
			Hash:    "hash",
			Slot:    456,
		}
		item, err := cbor.Marshal(want.Point())
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		var point Point
		err = cbor.Unmarshal(item, &point)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		if got, want := point.PointType(), PointTypeStruct; got != want {
			t.Fatalf("got %v; want %v", got, want)
		}

		got, ok := point.PointStruct()
		if !ok {
			t.Fatalf("got false; want true")
		}
		if !reflect.DeepEqual(got, want) {
			t.Fatalf("got %#v; want %#v", got, want)
		}
	})
}

func TestPoint_DynamoDB(t *testing.T) {
	t.Run("string", func(t *testing.T) {
		want := PointString("origin")
		item, err := dynamodbattribute.Marshal(want.Point())
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		var point Point
		err = dynamodbattribute.Unmarshal(item, &point)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		if got, want := point.PointType(), PointTypeString; got != want {
			t.Fatalf("got %v; want %v", got, want)
		}

		got, ok := point.PointString()
		if !ok {
			t.Fatalf("got false; want true")
		}
		if !reflect.DeepEqual(got, want) {
			t.Fatalf("got %v; want %v", got, want)
		}
	})

	t.Run("struct", func(t *testing.T) {
		want := &PointStruct{
			BlockNo: 123,
			Hash:    "hash",
			Slot:    456,
		}
		item, err := dynamodbattribute.Marshal(want.Point())
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		var point Point
		err = dynamodbattribute.Unmarshal(item, &point)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		if got, want := point.PointType(), PointTypeStruct; got != want {
			t.Fatalf("got %v; want %v", got, want)
		}

		got, ok := point.PointStruct()
		if !ok {
			t.Fatalf("got false; want true")
		}
		if !reflect.DeepEqual(got, want) {
			t.Fatalf("got %v; want %v", got, want)
		}
	})
}

func TestPoint_JSON(t *testing.T) {
	t.Run("string", func(t *testing.T) {
		want := PointString("origin")
		data, err := json.Marshal(want.Point())
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}

		var point Point
		err = json.Unmarshal(data, &point)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		if got, want := point.PointType(), PointTypeString; got != want {
			t.Fatalf("got %v; want %v", got, want)
		}

		got, ok := point.PointString()
		if !ok {
			t.Fatalf("got false; want true")
		}
		if !reflect.DeepEqual(got, want) {
			t.Fatalf("got %v; want %v", got, want)
		}
	})

	t.Run("struct", func(t *testing.T) {
		want := &PointStruct{
			BlockNo: 123,
			Hash:    "hash",
			Slot:    456,
		}
		data, err := json.Marshal(want.Point())
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		var point Point
		err = json.Unmarshal(data, &point)
		if err != nil {
			t.Fatalf("got %v; want nil", err)
		}
		if got, want := point.PointType(), PointTypeStruct; !reflect.DeepEqual(got, want) {
			t.Fatalf("got %v; want %v", got, want)
		}

		got, ok := point.PointStruct()
		if !ok {
			t.Fatalf("got false; want true")
		}
		if !reflect.DeepEqual(got, want) {
			t.Fatalf("got %v; want %v", got, want)
		}
	})
}

func TestTxID_Index(t *testing.T) {
	if got, want := TxID("a#3").Index(), 3; got != want {
		t.Fatalf("got %v; want %v", got, want)
	}
}

func TestTxID_TxHash(t *testing.T) {
	if got, want := TxID("a#3").TxHash(), "a"; got != want {
		t.Fatalf("got %v; want %v", got, want)
	}
}

func TestPoints_Sort(t *testing.T) {
	s1 := PointString("1").Point()
	s2 := PointString("2").Point()
	p1 := PointStruct{Slot: 10}.Point()
	p2 := PointStruct{Slot: 10}.Point()
	tests := map[string]struct {
		Input Points
		Want  Points
	}{
		"string": {
			Input: Points{s1, s2},
			Want:  Points{s2, s1},
		},
		"points": {
			Input: Points{p1, p2},
			Want:  Points{p2, p1},
		},
		"mixed": {
			Input: Points{s1, p1, s2, p2},
			Want:  Points{p2, p1, s2, s1},
		},
	}
	for label, tc := range tests {
		t.Run(label, func(t *testing.T) {
			got := tc.Input
			sort.Sort(got)
			if !reflect.DeepEqual(got, tc.Want) {
				t.Fatalf("got %#v; want %#v", got, tc.Want)
			}
		})
	}
}

func TestVasil(t *testing.T) {
	data := `{
  "type": "jsonwsp/response",
  "version": "1.0",
  "servicename": "ogmios",
  "methodname": "RequestNext",
  "result": {
    "RollForward": {
      "block": {
        "alonzo": {
          "body": [
            {
              "witness": {
                "signatures": {
                  "1c51baefbc2943dd0ffff06fafd00a5d338cd3f202532755d75b972b76dc6898": "TxuI/ibiWo3gI6Lvx5ywtP9OoiW447Mq6AkPItlZOpDvhjBuOI6k9qta0a7sTtvXc/p4+hip8mpc5nG6/iosBg=="
                },
                "scripts": {
                  "39cc7abca0fcf510f20f448dc67c8433a9765a3e36a30082202e4e1d": {
                    "plutus:v1": ""
                  }
                },
                "datums": {
                  "5865d96e4313780a37af26055cdcc90308db23adaf4f2082178355e5e1dc20f6": "a54a63757272656e63696573a246736f75726365581c68747470733a2f2f6e6f746e756c6c736f6c7574696f6e732e636f6d4773796d626f6c739fa4457363616c651a000186a04673796d626f6c4345555244756e6974474555522f5553444576616c75651a00014adca4457363616c651a000186a04673796d626f6c4347425044756e6974474742502f5553444576616c75651a00011c15a4457363616c6518644673796d626f6c4349445244756e6974474944522f5553444576616c75651a0015b625ff466d6574616c73a246736f75726365581c68747470733a2f2f6e6f746e756c6c736f6c7574696f6e732e636f6d4773796d626f6c739fa4457363616c6518644673796d626f6c42417544756e6974495553442f6f756e63654576616c75651a0002c528a4457363616c6518644673796d626f6c42416744756e6974495553442f6f756e63654576616c756519095ca4457363616c65014673796d626f6c42507444756e6974495553442f6f756e63654576616c7565190400a4457363616c65014673796d626f6c42506444756e6974495553442f6f756e63654576616c75651909b3ff4773657276696365581c68747470733a2f2f6f7261636c652e70696779746f6b656e2e636f6d44736f6672a246736f75726365583768747470733a2f2f7777772e6e6577796f726b6665642e6f72672f6d61726b6574732f7265666572656e63652d72617465732f736f66724773796d626f6c739fa4457363616c6518644673796d626f6c44534f465244756e697441254576616c756505ff4974696d657374616d705819323032312d30382d33315431373a30363a31352b30303a3030"
                },
                "redeemers": {
                  "spend:1": {
                    "redeemer": "02",
                    "executionUnits": {
                      "memory": 4319292,
                      "steps": 1448909354
                    }
                  }
                },
                "bootstrap": []
              },
              "raw": "",
              "id": "d0cca8b82263a4c1ad2c4f845ab58ed5610fdb1fcbe76faa92d19ef5aa2655b2",
              "body": {
                "inputs": [],
                "collaterals": [
                  {
                    "txId": "9fca96034e904d0a5c9cef27fa83188da4169ccdaefde0c2518e5f093a43dee3",
                    "index": 3
                  }
                ],
                "outputs": [
                  {
                    "address": "addr_test1qq2el3jxkkg6g3euz9ymzs35kg08drlu33w5uharfx6g8x28gu262anw6rvqr5th53h8khjhkwrdzyq3qercygw3z6yq6vd6w0",
                    "value": {
                      "coins": 100547906,
                      "assets": {}
                    },
                    "datumHash": null,
                    "datum": null
                  },
                  {
                    "address": "addr_test1wquuc74u5r702y8jpazgm3nusse6jaj68cm2xqyzyqhyu8g25ysjg",
                    "value": {
                      "coins": 5000000,
                      "assets": {
                        "150ee39332bddb6083c2294cedb206aadbf7606e4bf53184fc7e9cad.504947535459": 1
                      }
                    },
                    "datumHash": "a9bb6999d768e9e04bae81970e39c3b496c756adbdd1b137bfdba5a9ef3678a0",
                    "datum": "a9bb6999d768e9e04bae81970e39c3b496c756adbdd1b137bfdba5a9ef3678a0"
                  },
                  {
                    "address": "addr_test1qq2el3jxkkg6g3euz9ymzs35kg08drlu33w5uharfx6g8x28gu262anw6rvqr5th53h8khjhkwrdzyq3qercygw3z6yq6vd6w0",
                    "value": {
                      "coins": 103384646,
                      "assets": {
                        "469f9a74824555709042fb95aa2d11e3c7fa4eada2fe97bc287687dd.4641524d": 1
                      }
                    },
                    "datumHash": null,
                    "datum": null
                  },
                  {
                    "address": "addr_test1qq2el3jxkkg6g3euz9ymzs35kg08drlu33w5uharfx6g8x28gu262anw6rvqr5th53h8khjhkwrdzyq3qercygw3z6yq6vd6w0",
                    "value": {
                      "coins": 2000000,
                      "assets": {}
                    },
                    "datumHash": null,
                    "datum": null
                  }
                ],
                "certificates": [],
                "withdrawals": {},
                "fee": 836739,
                "validityInterval": {
                  "invalidBefore": null,
                  "invalidHereafter": null
                },
                "mint": {
                  "coins": 0,
                  "assets": {}
                },
                "network": null,
                "scriptIntegrityHash": "377ce1c5e344b4ba99f56c23619e498088b7154c1f387e467cdd94774256ec90",
                "requiredExtraSignatures": []
              },
              "inputSource": "inputs"
            }
          ],
          "header": {
            "signature": "WzXJKK5w7r6PiplnbgHruL3vPBsp25GjgNMKEG+i2yNdJyHcIrQ7Gy7/B8KMXNQhIU1kAFarVpfKcEf6oN6pDk48rIqp2V1ytQmn6hqvXiLYTW/Ee7l50Dist3rvKlztK0Z75B5v49+PU5ollX5wmlXOB9EHGRsPhm0M/IXC56+DS8/EcaSTClJWkAuA48qSBj9r0t9ZM219QZONcliFPksOr2uMwIu7+1HKTiMblTCang3OMnKM9INsVGjWD1BUtiBsuWRxTMnvUclgefrCSX1EqE/kmh3DhSWngVZvQ6QsjqiKloBgGY0k/aIOdUVqvCywPpETbCbVYeIKLwje5WL577dftAdeFGkm35oIV1wTh4L3ynkbLkYULIw74qVdbud98azKYG75aC8NVvH5qtQNDOdWqgHdazLO6L9KzgUXN8gM9l8wze5z83OezKDZl3pEXw5pP2x/5qPWzmosIRqH8URsl2Tv41sliju93Hg53Pn+ABCtvkxCGeJePkqX0UY7FyjCuGm1Q8BuUrRwAYTvMZyIq690TQBws6YSPzlpZjvROSvhQG1eh+CRnMgT4zPkMaVwtA67rDS7+mEGwQ==",
            "nonce": {
              "output": "4027vOEqHhktDnDyyK15RhzP0uekYHz3igwRn0sv7vZ/FqVVHimdVb/6UiOCnUvm+cB8GISXtvuWNO/x5jwZPg==",
              "proof": "1yM2OCYdaiipW9ibEdfYGfylVWjXdYIWu/1edLoBuoNdEwV1xIcUU1BaEXtWXI9bWsXanOhzmH88/iul23jEnVIdAa1pbdEs2RT8bxRp/gE="
            },
            "leaderValue": {
              "output": "AB3gWlYr0Bf+2uOECAlVMN6UD3Ghuw38bBQS8RIyJIr23Vl1iezZgC63vpt6yHhxzYLq+K0DqmjxA/0EXljPiw==",
              "proof": "xpyQWyI3ny7Ll0aNpnxVnmn1GWMqdjYXU5hFW0g791JCw7C3XQPHzbPmmap0ypwDOJwySe21aJ3d2FMkNoYHlxLE6sRU9K55oRvjuS/lJQ8="
            },
            "opCert": {
              "hotVk": "T3uhokqx6BYURJC99X7g6c3wqmjYYV6787uXrdWVcIw=",
              "count": 5,
              "kesPeriod": 268,
              "sigma": "ifaVk3UPIEM/I3lJvEwNKjyZL6BgYRHDyqJNNrqyh75pKYnCLkpUvxTLLTWXo7nQZQlm03KkQ1NbmoBeHxA6BA=="
            }
          },
          "headerHash": "8add217cbfe546c3aa937bd4a6dddaa16ddc57198ecbcdaff39b2b8c7ffa6296"
        }
      }
    }
  },
  "reflection": null
}
`
	var response Response
	err := json.Unmarshal([]byte(data), &response)
	if err != nil {
		t.Fatalf("error unmarshalling response: %v", err)
	}
}
